Create an empty list to be filled later :
- Syntax : assign to variable var = []

convert object to list : 
- list(object)
- list("abcd")
- list(range(5))
- list(dict) #list of keys only


add elements to end of a list : 
- list.append(element)
- mylist.append(1)


Get a list from string by split  : 
- 'string.split(separator)'
- string = "Ann Carol Jean"
- mylist = string.split(" ")


Get a list from multiline string or document by split function :
- multline string : |

    mystring = """Line one
    Line two
    Line three"""
- mylist = mystring.split("\n")


convert a range to a list  : 
-  list(range(limit)
- The list starts from 0 and ends before the limit which is never included. 
- list(range(10))


convert range to list skipping some  items : 
-  range(start,end,step)
- create a range of numbers skipping each step from start to item before last.
- list(range(0,40,4))


Get element from a list by its index : 
-  list[index]
- mylist = [1,2,3,4,5]
- mylist[3]


slice a list by index : 
-  list[start_index : end_index]
- mylist = list(range(40))
- mylist[14:20]


Get last element of a list: 
- Mylist = [1,2,3,4,5,6]
- Mylist[-1]


Slice a list from index to end : 
- mylist = [1,2,3,4,5,6]
- mylist[4:]


Reverse elements in a list : 
- mylist = [1,2,3,4,5]
- mylist[::-1]


Slice a list by Slice function  : 
-  list[slice[start,end,step]
- mylist = [1,2,3,4,5,6,7,8,9]
- mylist[slice(2,-1,2)]


Get number of elements in a list :  
- len(list) >
- len([1,2,3,4,5,6,7,8,9])


check if list is empty : 
- mylist  = [1,2,3,4,5,6,7,8,9]
- Mylist == [] 
if not mylist: print("list is empty")


Check if an element exists in a list : 
- mylist = [1,2,3,4,5,6,7,8,9]
- 10 in mylist


Insert element at a particular position in a list: 
- list.insert(index, object)
- mylist = [1,2,3,4,5,6,7,8,9]
- mylist.insert(3,10)


Remove and return last element in a list : 
-  list.pop()
- mylist = [1,2,3,4,5,6,7,8,9]
- mylist.pop()

Remove and get  element by its index : 
- list.pop(index)
- mylist = [1,2,3,4,5,6,7,8,9]
- mylist.pop(3)


Remove first occurence of matching element in a list : 
- list.remove(element)
- del(list[index])
- mylist = [1,2,3,4,5,6,7,8,9]
- mylist.remove(6)
- del(mylist[3])


Remove duplicates from a list : 
- list(set(list)) >
- mylist = [7,1,2,6, 3,2,4,5,2,6,7,8,4,9,3]
- mylist = list(set(mylist))


Iterate over elements in a list one by one :  
- "for 'element' in list : 'function' element "
- mylist = [1,2,3,4,5,6,7,8,9]
- for x in list :  print(x**x)


Apply function on each element  of a list with map and lambda : 
-  map(lambda v: function(v), list) 
- mylist = [1,2,3,4,5,6,7,8,9]
- map(lambda x:  x**x, mylist)


Iterate over elements of a list with list comprehension : 
-  [function(v) for v in mylist]
- mylist = [1,2,3,4,5,6,7,8,9]
- print[ x**x for x in mylist]


filter elements by ' if ' in  list comprehension : 
- [v for v in list if v == condition]
- mylist = [1,2,3,4,5,6,7,8,9]
- [x for x in mylist if x % 2 == 0]


Select elements in a list by regex pattern : 
- import re
- [v for v in list if re.search('pattern', v)]
- mylist = ["Ann", "Carol", "Jean", "Anrew", "Janette", "Malcolm"]
- [x for x in mylist if re.search("^A", x)]


Get shared elements in 2 lists without duplicates : 
- list(set(list1).intersection(list2))
- mylist1 = [1,3,6,7,8,9,3,1]
- mylist2 = [2,3,4,5,6,7,8,9]
- list(set(mylist1).intersection(mylist2))


Get shared elements in 2 lists with duplicates :  
-  [element for element in list1 if element in list2]
- mylist1 = [1,3,6,7,8,9,3,1]
- mylist2 = [2,3,4,5,6,7,8,9]
- [element for element in mylist1 if element in mylist2]


Join elements of a list into a string using a separator : 
- "separator.join(list)"
- mylist = [2,3,4,5,6,7,8,9]
- " ''.join([str(x) for x in mylist]) #x must be string to be joined into string "


Concatenate join two separate lists with '+'  or  'extend' : 
- list1 + list2
- mylist1 = [1,3,6,7,8,9,3,1]
- mylist2 = [2,3,4,5,6,7,8,9]
- newlist = mylist1+mylist2
- mynewlist = mylist1.extend(mylist2)


Get index of an element in a list by its value : 
- list.index(value)
- mylist = [2,3,4,5,6,7,8,9]
- mylist.index(6)


Compare 2 lists for equality : 
-  set(list1) == set(list2)
- mylist1 = [1,3,6,7,8,9,3,1]
- mylist2 = [2,3,4,5,6,7,8,9]
- set(mylist1) == set(mylist2)


Search for element in nested lists : 
-  element in [sub for sublist in list for sub in sublist]
- mylist = [['ant','cat','bear'],['insect','animal','mammal']]
- print('insect' in [item for sublist in mylist for item in sublist])
- Flattened = [e for sublist  in mylist for e in sublist] #flatten nested list
- " 'insect' in Flattened "
- mylist = [[ "colors", "red", "blue", "green" ],[ "letters", "a", "b", "c" ],["foo", "bar"]]
- print(any("color" in sublist for sublist in mylist)) #colors not color


clear all elements in a list : 
- a = [ "a", "b", "c", "d", "e" ]
- a = []


Merge sequenctially elements from each lidt into list of tuples  : 
- transpose : replace rows by columns in two dimensional array
-  zip(list1,list2,list3) >
- a = [ 4, 5, 6 ]
- b = [ 7, 8, 9 ]
- c = [ 1, 2, 3 ] 
- zip(a,b,c) #=> [(4, 7, 1), (5, 8, 2), (6, 9, 3)]


Get multiple items in a list by their indices : 
-  map(list.__getitem__, indices)
- mylist  = [-2, 1, 5, 3, 8, 5, 6]
- indices  = [2, 4, 6]
- map(mylist.__getitem__,  indices) #=> [5, 8, 6]


Convert nested list to  dictionary : 
- dict(nested list) > #nested sublists size must be 2, i.e. in pairs
- a = [['one', 1], ['two', 2]]
- dict(a)


Sort elements in a list : 
- sorted(list) # ascending order 
- sorted(list, reverse = True) > # decending order
- a = [ "d", "a", "e", "c", "b" ]
- sorted(a) #in ascending order
- sorted(a,reverse=True) #in descending order


Shuffle elements in a list : 
- from random import shuffle
- a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]
- shuffle(a)
- print(a) #shuffle works in place and changes original list


Get random number of elements from a list : 
- import random
-  random.sample(list, number of elements to select)
- a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
- rs = random.sample(a, 3)
- print(rs)


Get repeated permutations of elements in a list : 
- itertools.permutations(list)
- import itertools
- a = ['a', 'b', 'd']
- b = itertools.permutations(a)
- for x in b: print("".join(x))

Insert element at specific index  : 
- list.insert(index, element>
- mylist = ['cat', 'window', 'defenestrate']
- mylist.insert(2, "dog") #insert 'dog' at index 2
- print(mylist)


Select elements in a list by a criterion : 
- [x for x in list if criterion(x) ]
-  e.g.   type(x),   x.startswith(""),  len(x) >= int
- "mylist = ['cat', 'window', 'defenestrate', [234554, 12.23], 'congratulation', {'name' : 'Karl'}]"
- [x for x in mylist if type(x) == str and x.startswith('d')]  #list comprehension
- [x for x in mylist if type(x) == dict] #by type
- [x for x in mylist if len(x) >= 6] #by  size

Remove element from a list by its value : 
- mylist = [1, 2, 'item', 3, 4, 5]
- mylist.remove('item')
- print(mylist)


Remove element from a list by its index : 
- you have to get item index first if not known
- mylist = [1, 2, 'item', 3, 4, 5]
- index = mylist.index("item")
- mylist.remove(list[index])


Count number of occurences of an element in a list : 
- list.count(element)
- mylist = [1, 2, 'x', 3, 4, 'x' , 5, 'x', 6] #how many xs?
- mylist.count('x')
- myist.count(mylist[5])#value at index 5 is 'x'


sort elements in a list : 
- list.sort(cmp=None, key=None, reverse=False) >
- a = [66.25, 333, 333, 1, 1234.5]
- a.sort()#list is sorted in place (modified) and a.sort() returns None


Sort elements of a list in reverse : 
- mylist = ['A' ,'b' ,'C' , 'd', 'E', 'f']
- mylist.sort(reverse=True)
- upercase higher than lowercase, lower to higher


Filter elements in a list by filter and lambda function : 
- filter(lambda x: func(x), list
- get numbers from list 1-24 which are divisable by 3 or 5
- mylist = filter(lambda x : x % 3 == 0 or x % 5 == 0 , range(2,25))


apply function to each element in a list using map : 
- map(func, list)>
- def cube(x): return x*x*x
- mylist = map(cube, range(1, 11))


sum range or all integer elements in a list : 
-  sum(list)
- sum(range(1, 11))#dedicated sum function
- sum([1,2,3,4,5])


list comprehension  : 
- [expr(var) for var in list if var == condition] #in square brackets
- import math
- [x**2 for x in range(10)]
- "[math.cos(x) for x in [1,2,3]]"


For and If uses in list comprehension : 
- combine in a tuple each 2 elements from two lists if they are not the same
- mylist = [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
- This is equivalent to : |-
        combs = []
        for x in [1,2,3]:
          for y in [3,1,4]:
            if x != y:
              combs.append((x, y))
        print(combs)


Apply a function or expression to all items by list comprehension  : 
- mylist = [-4, -2, 0, 2, 4]
- def func(x): return abs(x)
- [abs(x) for x in mylist]
- [func(x) for x in mylist]


Use of 2 variables in list comprehension  : 
- [(x, x**2) for x in range(6)] # the tuple must be parenthesized, otherwise an error is raised
- mylist = ["Ann", "Carol", "Jean"]
- [(i, x) for i, x in enumerate(mylist)]


Flatten nested  list by list comprehension  : 
- nested_list  = [[1,2,3], [4,5,6], [7,8,9]]
- print([item for element  in nested_list  for item  in element])


transpose rows and columns in matrix or nested lists : 
- matrix = [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12]]
- print(zip(*matrix))