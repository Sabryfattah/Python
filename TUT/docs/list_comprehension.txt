build list comprehension from list items modified by operation ==>
squares = [x**2 for x in range(10)]
sqs = map(lambda x: x**2, range(10)) 
print squares
print sqs



evaluate expression in the context of 'for' and 'if' clauses ==>
print [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
#This is equivalent to :-
combs = []
for x in [1,2,3]:
  for y in [3,1,4]:
    if x != y:
      combs.append((x, y))
print combs



use list comprehension to double each list item ==>
vec = [-4, -2, 0, 2, 4]
print [x*2 for x in vec]



use list comprehension to filter negative numbers from a list ==>
vec = [-4, -2, 0, 2, 4]
print [x for x in vec if x >= 0]



use list comprehension to apply a function to all elements ==>
vec = [-4, -2, 0, 2, 4]
print [abs(x) for x in vec]



use list comprehension to call a method on each element ==>
freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']
print [weapon.strip() for weapon in freshfruit]



create a list of 2-tuples like (number, square) ==>
print [(x, x**2) for x in range(6)]
# the tuple must be parenthesized, otherwise an error is raised
print [x, x**2 for x in range(6)]



flatten a list using a list comprehension with two 'for' ==>
vec = [[1,2,3], [4,5,6], [7,8,9]]
print [num for elem in vec for num in elem]



use multiple functions in list comprehension ==>
from math import pi
print [str(round(pi, i)) for i in range(1, 6)]