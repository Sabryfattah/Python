Create an iterator from iterable object ==>
x = iter([1, 2, 3])
print x
print x.next()
print x.next()
print x.next()
print x.next()
""" An iterator enumerates elements of a collection. 
It is an object with a single method next() returning 
the next element or raising StopIteration. """



get an iterator on object ==>
"""via the new built-in function iter(obj)
which calls obj.__class__.__iter__()."""
object = iter("Hello")
print list(object) #=> ['H', 'e', 'l', 'l', 'o']



list keys of a dictioary using iter==>
d = {"one" : 1, "two" : 2}
print list(iter(d)) #=> ['two', 'one']



get lines in a file using iter ==>
file = iter(open("c:/tab.txt"))
for line in list(file): print line



build a list or a tuple from an iterator ==>
e.g. list(an Iterator)
obj = iter((1,2,3,4,5))
list(obj) #=> [1, 2, 3, 4, 5]



Python implicitly uses iterators wherever it has to loop ==>
for e in range(10): print e
[x for x in range(10) if x > 8] #=> [9]
x,y,z = "Tom", "Dick", "Harry"
print z



use For as an iterator ==>
for i in [1, 2, 3, 4]: print i



Loop over a string characters  using for ==>
for c in "python": print c



Loop over keys of a dictionary using for ==>
for k in {"x": 1, "y": 2}: print k



Loop over lines of a file using for ==>
for line in open("tut\data\iter.txt"): print line



Iterable Objects ==>
""" Any object which can be used with FOR loop """
for e in 123   : print e #=> TypeError: 'int' object is not iterable
for e in "123" : print e #=> 1 2 3



use join function with iterable objects ==>
print ",".join(["a", "b", "c"]) #=> a,b,c
print ",".join({"x": 1, "y": 2}) #=> y,x



use list with iterable objects ==>
print list("python") #=> ['p', 'y', 't', 'h', 'o', 'n'] #characters
print list({"x": 1, "y": 2}) #=> ['y', 'x'] #keys



use iterators in a class ==>
class yrange:
	def __init__(self, n):
		self.i = 0
		self.n = n
	def __iter__(self):
		return self
	def next(self):
		if self.i < self.n:
			i = self.i
			self.i += 1
			return i
		else:
			raise StopIteration()
y = yrange(5)
print list(y)
print list(y)
z = zrange(5)
print list(z)
print list(z)